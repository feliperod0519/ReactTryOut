JSX is a JS extension
html code inside js files in a declarative way
not supported by browser then it's transformed before reaching the browser
Function name starts uppercase and return renderable value
Tree of Components
Dynamic Component
/c/AutoFormation/React/LearningCode/001-LearningCode/03 React Essentials/01-starting-project/01-starting-project
In props you can pass whatever even objects {jjjj:'llll'}

function CoreConcept(props){
  return (
    <li>
      <img src={props.image} alt={props.title} />
      <h3>{props.title}</h3>
      <p>{props.description}</p>
    </li>
  )
}
Props wraps an object


import reactImg from '../assets/react-core-concepts.png';
const reactDescriptions = ['Fundamental', 'Crucial', 'Core'];
import './Header.css'; //Header css will be not only applied to this component but to all <header>

function genRandomInt(max) {
  return Math.floor(Math.random() * (max + 1));
}

export default function Header(){
  const description = reactDescriptions[genRandomInt(2)];

  return (
    <header>
      <img src={reactImg} alt="Stylized atom" />
      <h1>React Essentials</h1>
      <p>
        {description} React concepts you will need for almost any app you are
        going to build!
      </p>
    </header>
  );
}

Events and event parameters

export default function TabButton({children, onSelect}){ 
    return (
      <li>
        <button onClick={onSelect}>{children}</button>
      </li>
    );
}

---------

import { CORE_CONCEPTS } from './data';
import Header from './components/Header/Header';
import CoreConcept from './components/CoreConcept';
import TabButton from './components/TabButton';

function App() {
  
  function OnClickHandler(selectedButton){
    console.log(selectedButton);
  }

  return (
    <div>
      <Header/>
      <main>
        <section id="core-concepts">
          <h2>Core Concepts</h2>
          <ul>
            <CoreConcept 
              title={CORE_CONCEPTS[0].title}
              description={CORE_CONCEPTS[0].description}
              image={CORE_CONCEPTS[0].image}/>
            <CoreConcept {...CORE_CONCEPTS[1]} />
            <CoreConcept {...CORE_CONCEPTS[2]} />
            <CoreConcept {...CORE_CONCEPTS[3]} />
          </ul>
        </section>
        <section id="examples">
          <h2>Examples</h2>
          <menu>
            <TabButton onSelect={()=>OnClickHandler('components')}>Components</TabButton>
            <TabButton onSelect={()=>OnClickHandler('jsx')}>JSX</TabButton>
            <TabButton onSelect={()=>OnClickHandler('props')}>Props</TabButton>
            <TabButton onSelect={()=>OnClickHandler('state')}>State</TabButton>
          </menu>
          Dynamic Content
        </section>
      </main>
    </div>
  );
}

export default App;

IMPORTANT:
By default, React components only execute once.
You have to tell React to Execute component again.
React compares old output(old jsx code) and applies differences

useState hook to reexecute functions

import { useState } from 'react';

function App() {

const [ selectedTopic, setSelectedTopic ] = useState('Please click a button'); 
//always called at top level //always called at top level

Ex:
import React, { useState } from 'react';

function Example() {
  // Declare a new state variable, which we'll call "count"
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}


----
import { useState } from 'react';

import { CORE_CONCEPTS } from './data';
import Header from './components/Header/Header';
import CoreConcept from './components/CoreConcept';
import TabButton from './components/TabButton';
import { EXAMPLES } from './data';

function App() {

  console.log('app execution');
  const [ selectedTopic, setSelectedTopic ] = useState(null); //always called at top level
  const [ selectedObj, setSelectedObj ] = useState(EXAMPLES.components)

  const tabContent = (
    <div id="tab-content">
      <h3>{selectedObj.title}</h3>
      <p>{selectedObj.description}</p>
      <pre>
        <code>{selectedObj.code}</code>
      </pre>
    </div>
  );

  function OnClickHandler(selectedButton){
    console.log(selectedButton);
    setSelectedTopic(selectedButton);
    setSelectedObj(EXAMPLES[selectedButton]);
  }

  return (
    <div>
      <Header />
      <main>
        <section id="core-concepts">
          <h2>Core Concepts</h2>
          <ul>
            <CoreConcept
              title={CORE_CONCEPTS[0].title}
              description={CORE_CONCEPTS[0].description}
              image={CORE_CONCEPTS[0].image}
            />
            <CoreConcept {...CORE_CONCEPTS[1]} />
            <CoreConcept {...CORE_CONCEPTS[2]} />
            <CoreConcept {...CORE_CONCEPTS[3]} />
          </ul>
        </section>
        <section id="examples">
          <h2>Examples</h2>
          <menu>
            <TabButton onSelect={() => OnClickHandler('components')}>
              Components
            </TabButton>
            <TabButton onSelect={() => OnClickHandler('jsx')}>JSX</TabButton>
            <TabButton onSelect={() => OnClickHandler('props')}>
              Props
            </TabButton>
            <TabButton onSelect={() => OnClickHandler('state')}>
              State
            </TabButton>
          </menu>
          <div id="tab-content">
            {!selectedTopic && <p>Please select a topic</p> }
            {selectedTopic && tabContent}
          </div>
        </section>
      </main>
    </div>
  );
}

export default App;

className for styles ... no class

Essentials deep dive

/c/AutoFormation/React/LearningCode/001-LearningCode/04 Essentials Deep Dive/01-starting-project/01-starting-project

Fragments
<></>

Forwarding Props 
Proxy props

export default function Section({title,children,...props}){
    return (
        <section {...props}>
            <h2>{title}</h2>
            {children}
        </section>
    )
}

---

<TabButton
          isSelected={selectedTopic === 'components'}
          onClick={() => handleSelect('components')}
        >
export default function TabButton({ children, isSelected, ...props }) {
  console.log('TABBUTTON COMPONENT EXECUTING');
  return (
    <li>
      <button className={isSelected ? 'active' : undefined} {...props}>
      {/* <button className={isSelected ? 'active' : undefined} onClick={onSelect}></button> */}
        {children}
      </button>
    </li>
  );
}

JSX Slots

export default function Tabs({ children, buttons }) {
    return (
      <>
        <menu>{buttons}</menu>
        {children}
      </>
    );
}
Children will carry the content
Buttons will have the react function

  return (
    <Section id="examples" title="examples">
      <Tabs
        buttons={
          <>
            <TabButton isSelected={selectedTopic === 'components'} onClick={() => handleSelect('components')}>
              Components
            </TabButton>
            <TabButton isSelected={selectedTopic === 'jsx'} onClick={() => handleSelect('jsx')} >
              JSX
            </TabButton>
            <TabButton isSelected={selectedTopic === 'props'} onClick={() => handleSelect('props')}>
              Props
            </TabButton>
            <TabButton isSelected={selectedTopic === 'state'} onClick={() => handleSelect('state')}>
              State
            </TabButton>
          </>
        }
      >
        {tabContent}
      </Tabs>
    </Section>
  );

Dynamic component types

export default function Tabs({ children, buttons, ButtonsContainer='menu' }) {
    return (
      <>
        <ButtonsContainer>{buttons}</ButtonsContainer>
        {children}
      </>
    );
}

<Tabs
        buttons={
          <>
            <TabButton isSelected={selectedTopic === 'components'} onClick={() => handleSelect('components')}>
              Components
            </TabButton>
            <TabButton isSelected={selectedTopic === 'jsx'} onClick={() => handleSelect('jsx')} >
              JSX
            </TabButton>
            <TabButton isSelected={selectedTopic === 'props'} onClick={() => handleSelect('props')}>
              Props
            </TabButton>
            <TabButton isSelected={selectedTopic === 'state'} onClick={() => handleSelect('state')}>
              State
            </TabButton>
          </>
        }
        ButtonsContainer='menu'
      >
        {tabContent}
      </Tabs>

two-way binding

import { useState } from "react";

export default function Player({initialName,symbol}){

    const [ isEditing, setIsEditing ] = useState(false);
    const [playerName,setPlayerName] = useState(initialName);
    
    function handleEditClick(){
        //setIsEditing(!isEditing); error
        setIsEditing((editing)=>!editing) //this is a good practice because of scheduling
    }

    function handleChange(event){
        console.log(event);
        setPlayerName(event.target.value);
    }

    let editablePlayerName = <span className="player-name">{playerName}</span>;



    if (isEditing){
        editablePlayerName =(<input type="text" required value={playerName} onChange={handleChange} />);
    }
    
    return (
     <li>
       <span className="player">
         {editablePlayerName}
         <span className="player-symbol">{symbol}</span>
       </span>
       <button onClick={handleEditClick}>{isEditing?'Save':'Edit'}</button>
     </li>
   );
}

----

improved version:

import { useState } from "react"

const initialGameBoard = [
    [null,null,null],
    [null,null,null],
    [null,null,null]
]

export default function GameBoard(){

    const [ gameboard, setGameBoard ] = useState(initialGameBoard);

    function handleSelectSquare(rowIndex,colIndex){
        setGameBoard((prevGameBoard)=>{
            const updatedBoard = [...prevGameBoard.map(innerArray => [...innerArray])]
            updatedBoard[rowIndex][colIndex] = 'X';
            return updatedBoard;
        })
    }

    return <ol id="game-board">
        {gameboard.map((row,rowIndex)=><li key={rowIndex}>
            <ol>
                {row.map((playerSymbol,colIndex)=><li key={colIndex}><button onClick={()=>handleSelectSquare(rowIndex,colIndex)}>{playerSymbol}</button></li>)}
            </ol>
        </li>)}
    </ol>
}

--- 

Lifting state

Lifting the state is lifting the state to the closest ancestor component

[Ancestor] <--> (State-manages)
|        |          ^
V        V          |
C1------C2-----------

In the following example app component can pass state to Player and GameBoard

import Player from "./Components/Player";
import GameBoard from "./Components/GameBoard";
import { useState } from "react";

function App() {

  const [activePlayer,setActivePlayer] = useState('X')

  function handleSelectSquare(){
    setActivePlayer((curActivePlayer)=>curActivePlayer==='X'?'O':'X')
  }

  return (
    <main>
      <div id="game-container">
        <ol id="players" className="highlight-player">
          <Player initialName="Player 1" symbol="X" isActive={activePlayer==='X'}/>
          <Player initialName={"Player 2"} symbol={"O"} isActive={activePlayer==='O'}/>
        </ol>
        <GameBoard onSelectSquare={handleSelectSquare} activePlayerSymbol={activePlayer} />
      </div>
      LOG
    </main>
  );
}

export default App
......

import { useState } from "react"

const initialGameBoard = [
    [null,null,null],
    [null,null,null],
    [null,null,null]
]

export default function GameBoard({onSelectSquare, activePlayerSymbol}){

    const [ gameboard, setGameBoard ] = useState(initialGameBoard);

    function handleSelectSquare(rowIndex,colIndex){
        setGameBoard((prevGameBoard)=>{
            const updatedBoard = [...prevGameBoard.map(innerArray => [...innerArray])]
            updatedBoard[rowIndex][colIndex] = activePlayerSymbol
            return updatedBoard;
        });
        onSelectSquare();
    }

    

    return <ol id="game-board">
        {gameboard.map((row,rowIndex)=><li key={rowIndex}>
            <ol>
                {row.map((playerSymbol,colIndex)=><li key={colIndex}><button onClick={()=>handleSelectSquare(rowIndex,colIndex)}>{playerSymbol}</button></li>)}
            </ol>
        </li>)}
    </ol>
}

PRACTICE

C:\AutoFormation\React\LearningCode\001-LearningCode

STYLING

inline

import logo from '../assets/logo.png';

import logo from '../assets/logo.png';

export default function Header() {
  return (
    <header>
      <img src={logo} alt="A canvas" />
      <h1>ReactArt</h1>
      <p style={{
        color:'red',textAlign:'left'
      }}>A community of artists and art-lovers.</p>
    </header>
  );
}

REF AND PORTALS

Non-ref version

import { useState } from "react";

export default function Player() {

  const [enteredPlayerName, setEnteredPlayerName] = useState('');
  const [submitted, setSubmitted ] = useState(false);

  let h = (event) => { 
        setSubmitted(false)
        setEnteredPlayerName(event.target.value);
        console.log(event.target.value) 
  }

  function handleClick(){
    setSubmitted(true)
  }
  
  return (
    <section id="player">
      <h2>Welcome {submitted?enteredPlayerName:'Unknown'}</h2>
      <p>
        <input type="text" onChange={h} value={enteredPlayerName} />
        <button onClick={handleClick}>Set Name</button>
      </p>
    </section>
  );
}

Ref makes your code leaner

import { useState, useRef } from "react";

export default function Player() {

  const playerName = useRef();

  const [enteredPlayerName, setEnteredPlayerName] = useState(null);
  const [submitted, setSubmitted ] = useState(false);

  let h = (event) => { 
        setSubmitted(false)
        setEnteredPlayerName(event.target.value);
        console.log(event.target.value) 
  }

  function handleClick(){
    setEnteredPlayerName(playerName.current.value);
    playerName.current.value = ''; //Not good because you're touching the DOM without React intervention which is banned
    //but for simplicity it's ok
  }
  
  return (
    <section id="player">
      <h2>Welcome {enteredPlayerName??'Unknown'}</h2>
      <p>
        <input ref={playerName} type="text"  />
        <button onClick={handleClick}>Set Name</button>
      </p>
    </section>
  );
}

Refs vs. States

Refs are not instantiated until next render cycle... so if you get rid of
states. you won't see the current because it's undefined.

Main difference is state forces re-execution while ref don't.

State: Causes component re-evaluation when changed.
State: Should be used for values reflected in UI
State: Should not be used for behind the scenes values with no direct UI.
Refs:  Do NOT Causes component re-evaluation when changed.

import { useRef } from "react";
import { useState } from "react"

export default function TimeChallenge({title,targetTime}){

    const timer = useRef()
    const [timerStarted, setTimerStarted] = useState(false);
    const [timerExpired, setTimerExpired] = useState(false);

    function handleStart(){
        timer.current = setTimeout(()=>{
            setTimerExpired(true);
        },targetTime * 1000)
        setTimerStarted(true);
        console.log('Start')
    }

    function handleStop(){
        clearTimeout(timer.current)
        setTimerStarted(false);
    }

    return (
        <section className="challenge">
            <h2>{title}</h2>
            {timerExpired && (<p>You lost!</p>)}

            <p className="challenge-time">
                {targetTime} second{targetTime>1?'s':''}
            </p>
            <p>
                <button onClick={timerStarted? handleStop: handleStart}>
                    {timerStarted?'Stop':'Start'} Challenge
                </button>          
                        
            </p>
            <p className={timerStarted ? 'active' : undefined}>
                Timer {timerStarted?'is running':'is inactive'}
            </p>

        </section>
    )
}

Forwarding refs

import { forwardRef } from "react"

const ResultModal = forwardRef(function ResultModal({result,targetTime}, ref){
    return (
        <dialog ref={ref} className="result-modal">
            <h2>You {result}</h2>
            <p>The target time was <strong>{targetTime}</strong> seconds.</p>
            <p>You stoped the timer with <strong>X seconds left</strong></p>
            <form method="dialog">
                <button>Close</button>
            </form>
        </dialog>
    )
});

export default ResultModal;

---

import { useRef } from "react";
import { useState } from "react"
import ResultModal from "./ResultModal";

export default function TimeChallenge({title,targetTime}){

    const timer = useRef()
    const [timerStarted, setTimerStarted] = useState(false);
    const [timerExpired, setTimerExpired] = useState(false);
    const dialog = useRef();

    function handleStart(){
        timer.current = setTimeout(()=>{
            setTimerExpired(true);
            dialog.current.showModal();
        },targetTime * 1000)
        setTimerStarted(true);
        console.log('Start')
    }

    function handleStop(){
        clearTimeout(timer.current)
        setTimerStarted(false);
    }

    return (
      <>
        <ResultModal ref={dialog} targetTime={targetTime} result="lost"/>
        <section className="challenge">
          <h2>{title}</h2>

          <p className="challenge-time">
            {targetTime} second{targetTime > 1 ? 's' : ''}
          </p>
          <p>
            <button onClick={timerStarted ? handleStop : handleStart}>
              {timerStarted ? 'Stop' : 'Start'} Challenge
            </button>
          </p>
          <p className={timerStarted ? 'active' : undefined}>
            Timer {timerStarted ? 'is running' : 'is inactive'}
          </p>
        </section>
      </>
    );
}

Prop drilling

Component Composition without creating a chain of calls

import { useState } from 'react';

import Header from './components/Header.jsx';
import Shop from './components/Shop.jsx';
import { DUMMY_PRODUCTS } from './dummy-products.js';

import  Product  from './components/Product.jsx'

function App() {
  const [shoppingCart, setShoppingCart] = useState({
    items: [],
  });

  function handleAddItemToCart(id) {
    setShoppingCart((prevShoppingCart) => {
      const updatedItems = [...prevShoppingCart.items];

      const existingCartItemIndex = updatedItems.findIndex(
        (cartItem) => cartItem.id === id
      );
      const existingCartItem = updatedItems[existingCartItemIndex];

      if (existingCartItem) {
        const updatedItem = {
          ...existingCartItem,
          quantity: existingCartItem.quantity + 1,
        };
        updatedItems[existingCartItemIndex] = updatedItem;
      } else {
        const product = DUMMY_PRODUCTS.find((product) => product.id === id);
        updatedItems.push({
          id: id,
          name: product.title,
          price: product.price,
          quantity: 1,
        });
      }

      return {
        items: updatedItems,
      };
    });
  }

  function handleUpdateCartItemQuantity(productId, amount) {
    setShoppingCart((prevShoppingCart) => {
      const updatedItems = [...prevShoppingCart.items];
      const updatedItemIndex = updatedItems.findIndex(
        (item) => item.id === productId
      );

      const updatedItem = {
        ...updatedItems[updatedItemIndex],
      };

      updatedItem.quantity += amount;

      if (updatedItem.quantity <= 0) {
        updatedItems.splice(updatedItemIndex, 1);
      } else {
        updatedItems[updatedItemIndex] = updatedItem;
      }

      return {
        items: updatedItems,
      };
    });
  }

  return (
    <>
      <Header
        cart={shoppingCart}
        onUpdateCartItemQuantity={handleUpdateCartItemQuantity}
      />
      <Shop>
        {DUMMY_PRODUCTS.map((product) => (
          <li key={product.id}>
            <Product {...product} onAddToCart={handleAddItemToCart} />
          </li>
        ))}
      </Shop>
    </>
  );
}

export default App;

...

export default function Shop({ children }) {
  return (
    <section id="shop">
      <h2>Elegant Clothing For Everyone</h2>

      <ul id="products">
        {children}
      </ul>
    </section>
  );
}

you might end up with a bloated app.jsx

CONTEXT API

Somewhat global component wrap that can be used as a state

1. Setting up the context

in for instance App.jsx (header and shop updates the cart content)

return (
    <CartContext.Provider>
      <Header
        cart={shoppingCart}
        onUpdateCartItemQuantity={handleUpdateCartItemQuantity}
      />
      <Shop>
        {DUMMY_PRODUCTS.map((product) => (
          <li key={product.id}>
            <Product {...product} onAddToCart={handleAddItemToCart} />
          </li>
        ))}
      </Shop>
    </CartContext.Provider>
  );
  
import { createContext } from "react";

export const CartContext = createContext({
    items: []
});

2. Consuming the context (part 1)

use / useContext hooks are very alike.
useContext can't be used in an if block for example
while use can.

import { createContext } from "react";

export const CartContext = createContext({
    items: []
});

import { useContext } from "react";
import { CartContext } from "../store/shopping-cart-context";

export default function Cart({ onUpdateItemQuantity }) {

  const { items } = useContext(CartContext);

  const totalPrice = items.reduce(
    (acc, item) => acc + item.price * item.quantity,
    0
  );
  const formattedTotalPrice = `$${totalPrice.toFixed(2)}`;

  return (
    <div id="cart">
      {items.length === 0 && <p>No items in cart!</p>}
      {items.length > 0 && (
        <ul id="cart-items">
          {items.map((item) => {
            const formattedPrice = `$${item.price.toFixed(2)}`;

            return (
              <li key={item.id}>
                <div>
                  <span>{item.name}</span>
                  <span> ({formattedPrice})</span>
                </div>
                <div className="cart-item-actions">
                  <button onClick={() => onUpdateItemQuantity(item.id, -1)}>
                    -
                  </button>
                  <span>{item.quantity}</span>
                  <button onClick={() => onUpdateItemQuantity(item.id, 1)}>
                    +
                  </button>
                </div>
              </li>
            );
          })}
        </ul>
      )}
      <p id="cart-total-price">
        Cart Total: <strong>{formattedTotalPrice}</strong>
      </p>
    </div>
  );
}

Linking Context to State

function App() {
  const [shoppingCart, setShoppingCart] = useState({
    items: [],
  });
....

return (
    <CartContext.Provider value={shoppingCart}>
      <Header
        cart={shoppingCart}
        onUpdateCartItemQuantity={handleUpdateCartItemQuantity}
      />
	  
Now, let's not only read values but also update them.

A little example (simple)

import { createContext } from "react"


export const ThemeContext = createContext({
    theme: 'light',
    toggleTheme : ()=>{}
});
....

import { useContext, useState } from 'react';
import { ThemeContext } from './store/ThemeContext.context';
import Header from './Header';

export default function Page() {

  const {theme} = useContext(ThemeContext);

  return (
    <div id="app" className={theme} >
      <Header />
      <article>
        <h2>React Course</h2>
        <p>
          A course that teaches you React from the ground up and in great depth!
        </p>
      </article>
    </div>
  );
}

.....

import { useContext } from 'react';
import { ThemeContext } from './store/ThemeContext.context';

export default function Header() {
    
    const {toggleTheme} = useContext(ThemeContext);
    
    return (
      <header>
        <h1>Demo Website</h1>
        <button onClick={toggleTheme}>Toggle Theme</button>
      </header>
    );
  }
....

import { useState } from "react";
import Page from "./components/other/Page";
import { ThemeContext } from "./components/other/store/ThemeContext.context";

function App() {
  
  const [theme,setTheme] = useState({theme:'light',toggleTheme:null})

  function handleToggleTheme(){
    setTheme(()=>theme=='light'?'dark':'light')
  }
  
  return (
          <ThemeContext.Provider value={{theme,toggleTheme:handleToggleTheme}}>
            <Page />
          </ThemeContext.Provider>       
  );
}

export default App;

Side Effects

Effects are "tasks" that don't impact the current component 
render cycle.

/c/AutoFormation/React/LearningCode/001-LearningCode/11 Side Effects useEffect/01-starting-project/01-starting-project

navigator.geolocation.getCurrentPosition((position)=>{
    const sortedPlaces = sortPlacesByDistance(
      AVAILABLE_PLACES,
      position.coords.latitude,
      position.coords.longitude)
  });

This code is not related with the ender cycle

Effects tend to fall into the infinite loop:

1. const [availablePlaces, setAvailablePlaces] = useState([]);
...
2. navigator.geolocation.getCurrentPosition((position)=>{
    const sortedPlaces = sortPlacesByDistance(
      AVAILABLE_PLACES,
      position.coords.latitude,
      position.coords.longitude);
    setAvailablePlaces(sortedPlaces);
  });
....
<Places
          title="Available Places"
          places={availablePlaces}
          onSelectPlace={handleSelectPlace}
        />

In the moment you update:  setAvailablePlaces(sortedPlaces); Then  app is reloaded

then the navigateor make a new update and then it's updated forever

Effects will execute after the the dependency array is updated.

DO NOT OVERUSE --> Bad UC

You don't need effects here:

  function handleSelectPlace(id) {
    setPickedPlaces((prevPickedPlaces) => {
      if (prevPickedPlaces.some((place) => place.id === id)) {
        return prevPickedPlaces;
      }
      const place = AVAILABLE_PLACES.find((place) => place.id === id);
      return [place, ...prevPickedPlaces];
    });

    const storedIds = JSON.parse(localStorage.getItem('selectedPlaces')) || [];
    if (storedIds.indexOf(id === -1)){
      localStorage.setItem('selectedPlaces',JSON.stringify([id, ...storedIds]));
    }
  }

Because it's executed inside a function hooked to a click.
Moreover, effects have to be located at the root of the component.

const storedIds = JSON.parse(localStorage.getItem('selectedPlaces') || []);
const storedPlaces = storedIds.map((id)=>AVAILABLE_PLACES.find(place=>place.id === id));

doesn't need to be in effects
instead

import { useEffect, useRef, useState } from 'react';

import Places from './components/Places.jsx';
import { AVAILABLE_PLACES } from './data.js';
import Modal from './components/Modal.jsx';
import DeleteConfirmation from './components/DeleteConfirmation.jsx';
import logoImg from './assets/logo.png';

import { sortPlacesByDistance } from './loc.js'

const storedIds = JSON.parse(localStorage.getItem('selectedPlaces') || []);
const storedPlaces = storedIds.map((id)=>AVAILABLE_PLACES.find(place=>place.id === id));


function App() {
  const modal = useRef();
  const selectedPlace = useRef();
  const [availablePlaces, setAvailablePlaces] = useState([]);
  const [pickedPlaces, setPickedPlaces] = useState(storedPlaces);


  useEffect(()=>{
    navigator.geolocation.getCurrentPosition((position) => {
      const sortedPlaces = sortPlacesByDistance(
        AVAILABLE_PLACES,
        position.coords.latitude,
        position.coords.longitude
      );
      setAvailablePlaces(sortedPlaces);
    });
  },[]);

  function handleStartRemovePlace(id) {
    modal.current.open();
    selectedPlace.current = id;
  }

  function handleStopRemovePlace() {
    modal.current.close();
  }

  function handleSelectPlace(id) {
    setPickedPlaces((prevPickedPlaces) => {
      if (prevPickedPlaces.some((place) => place.id === id)) {
        return prevPickedPlaces;
      }
      const place = AVAILABLE_PLACES.find((place) => place.id === id);
      return [place, ...prevPickedPlaces];
    });

    const storedIds = JSON.parse(localStorage.getItem('selectedPlaces')) || [];
    if (storedIds.indexOf(id === -1)){
      localStorage.setItem('selectedPlaces',JSON.stringify([id, ...storedIds]));
    }
  }

  function handleRemovePlace() {
    setPickedPlaces((prevPickedPlaces) =>
      prevPickedPlaces.filter((place) => place.id !== selectedPlace.current)
    );
    modal.current.close();

    const storedIds = JSON.parse(localStorage.getItem('selectedPlaces')) || [];
    localStorage.setItem('selectedPlaces',JSON.stringify(storedIds.filter((id)=>{
      return id !== selectedPlace.current
    })));
    
  }

  return (
    <>
      <Modal ref={modal}>
        <DeleteConfirmation
          onCancel={handleStopRemovePlace}
          onConfirm={handleRemovePlace}
        />
      </Modal>

      <header>
        <img src={logoImg} alt="Stylized globe" />
        <h1>PlacePicker</h1>
        <p>
          Create your personal collection of places you would like to visit or
          you have visited.
        </p>
      </header>
      <main>
        <Places
          title="I'd like to visit ..."
          fallbackText={'Select the places you would like to visit below.'}
          places={pickedPlaces}
          onSelectPlace={handleStartRemovePlace}
        />
        <Places
          title="Available Places"
          places={availablePlaces}
          fallbackText="Sorting places by distance"
          onSelectPlace={handleSelectPlace}
        />
      </main>
    </>
  );
}

export default App;

-------------

Reducers

import "./styles.css";

import { useReducer, useEffect, useRef } from "react";

const initialState = {
  isRunning: false,
  time: 0
};

export default function Stopwatch() {
  const [state, dispatch] = useReducer(reducer, initialState);
  const idRef = useRef(0);

  useEffect(() => {
    if (!state.isRunning) {
      return;
    }
    idRef.current = setInterval(() => dispatch({ type: "tick" }), 1000);
    return () => {
      clearInterval(idRef.current);
      idRef.current = 0;
    };
  }, [state.isRunning]);

  return (
    <div className="stopwatch">
      {state.time}s
      <div>
        <button onClick={() => dispatch({ type: "start" })}>Start</button>
        <button onClick={() => dispatch({ type: "stop" })}>Stop</button>
        <button onClick={() => dispatch({ type: "reset" })}>Reset</button>
      </div>
    </div>
  );
}

function reducer(state, action) {
  switch (action.type) {
    case "start":
      return { ...state, isRunning: true };
    case "stop":
      return { ...state, isRunning: false };
    case "reset":
      return { isRunning: false, time: 0 };
    case "tick":
      return { ...state, time: state.time + 1 };
    default:
      throw new Error();
  }
}

http Request

/c/AutoFormation/React/LearningCode/001-LearningCode/15 HTTP Requests/01-starting-project/01-starting-project

import { useState } from 'react';
import Places from './Places.jsx';
import { useEffect } from 'react';

export default function AvailablePlaces({ onSelectPlace }) {

  const [availablePlaces, setAvailablePlaces] = useState([]);
  const [isFetching,setIsFetching] = useState(false);
  const [error, setError] = useState();

  useEffect(()=>{
    async function fetchPlaces(){
      setIsFetching(true);
      try{
        const response = await fetch('http://localhost:3000/places');
        const responseData = await response.json();
        if (!response.ok) {
          throw new Error('Failed to fetch places');
        }
        setAvailablePlaces(responseData.places);
        
      } catch (error) {
        setError({
          message:
            error.message || 'Could not fetch places, please try again later.',
        });
      }
      setIsFetching(false);      
    }
    fetchPlaces();
    // fetch('http://localhost:3000/places').then((response)=>
    // {
    //   return response.json()
    // }).then((responseData)=>{
    //   setAvailablePlaces(responseData.places)
    // })
  },[]);
  if (error) {
    return <Error title="An error occurred!" message={error.message} />;
  }

  return (
    <Places
      title="Available Places"
      places={availablePlaces}
      isLoading = {isFetching}
      fallbackText="No places available."
      loadingText="Fetching place data..."
      onSelectPlace={onSelectPlace}
    />
  );
}
.............

export default function Places({
  title,
  places,
  fallbackText,
  onSelectPlace,
  isLoading,
  loadingText,
}) {
  console.log(places);
  return (
    <section className="places-category">
      <h2>{title}</h2>
      {isLoading && <p className="fallback-text">{loadingText}</p>}
      {!isLoading && places.length === 0 && <p className="fallback-text">{fallbackText}</p>}
      {!isLoading && places.length > 0 && (
        <ul className="places">
          {places.map((place) => (
            <li key={place.id} className="place-item">
              <button onClick={() => onSelectPlace(place)}>
                <img
                  src={`http://localhost:3000/${place.image.src}`}
                  alt={place.image.alt}
                />
                <h3>{place.title}</h3>
              </button>
            </li>
          ))}
        </ul>
      )}
    </section>
  );
}

Custom Hooks

Rules of hooks

Rule #1: Hooks can't be called outside component functions
Rule #2: Only call hooks on the top level. Not inside an if for instance.


