JSX is a JS extension
html code inside js files in a declarative way
not supported by browser then it's transformed before reaching the browser
Function name starts uppercase and return renderable value
Tree of Components
Dynamic Component
/c/AutoFormation/React/LearningCode/001-LearningCode/03 React Essentials/01-starting-project/01-starting-project
In props you can pass whatever even objects {jjjj:'llll'}

function CoreConcept(props){
  return (
    <li>
      <img src={props.image} alt={props.title} />
      <h3>{props.title}</h3>
      <p>{props.description}</p>
    </li>
  )
}
Props wraps an object


import reactImg from '../assets/react-core-concepts.png';
const reactDescriptions = ['Fundamental', 'Crucial', 'Core'];
import './Header.css'; //Header css will be not only applied to this component but to all <header>

function genRandomInt(max) {
  return Math.floor(Math.random() * (max + 1));
}

export default function Header(){
  const description = reactDescriptions[genRandomInt(2)];

  return (
    <header>
      <img src={reactImg} alt="Stylized atom" />
      <h1>React Essentials</h1>
      <p>
        {description} React concepts you will need for almost any app you are
        going to build!
      </p>
    </header>
  );
}

Events and event parameters

export default function TabButton({children, onSelect}){ 
    return (
      <li>
        <button onClick={onSelect}>{children}</button>
      </li>
    );
}

---------

import { CORE_CONCEPTS } from './data';
import Header from './components/Header/Header';
import CoreConcept from './components/CoreConcept';
import TabButton from './components/TabButton';

function App() {
  
  function OnClickHandler(selectedButton){
    console.log(selectedButton);
  }

  return (
    <div>
      <Header/>
      <main>
        <section id="core-concepts">
          <h2>Core Concepts</h2>
          <ul>
            <CoreConcept 
              title={CORE_CONCEPTS[0].title}
              description={CORE_CONCEPTS[0].description}
              image={CORE_CONCEPTS[0].image}/>
            <CoreConcept {...CORE_CONCEPTS[1]} />
            <CoreConcept {...CORE_CONCEPTS[2]} />
            <CoreConcept {...CORE_CONCEPTS[3]} />
          </ul>
        </section>
        <section id="examples">
          <h2>Examples</h2>
          <menu>
            <TabButton onSelect={()=>OnClickHandler('components')}>Components</TabButton>
            <TabButton onSelect={()=>OnClickHandler('jsx')}>JSX</TabButton>
            <TabButton onSelect={()=>OnClickHandler('props')}>Props</TabButton>
            <TabButton onSelect={()=>OnClickHandler('state')}>State</TabButton>
          </menu>
          Dynamic Content
        </section>
      </main>
    </div>
  );
}

export default App;

IMPORTANT:
By default, React components only execute once.
You have to tell React to Execute component again.
React compares old output(old jsx code) and applies differences

useState hook to reexecute functions

import { useState } from 'react';

function App() {

const [ selectedTopic, setSelectedTopic ] = useState('Please click a button'); 
//always called at top level //always called at top level

Ex:
import React, { useState } from 'react';

function Example() {
  // Declare a new state variable, which we'll call "count"
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}


----
import { useState } from 'react';

import { CORE_CONCEPTS } from './data';
import Header from './components/Header/Header';
import CoreConcept from './components/CoreConcept';
import TabButton from './components/TabButton';
import { EXAMPLES } from './data';

function App() {

  console.log('app execution');
  const [ selectedTopic, setSelectedTopic ] = useState(null); //always called at top level
  const [ selectedObj, setSelectedObj ] = useState(EXAMPLES.components)

  const tabContent = (
    <div id="tab-content">
      <h3>{selectedObj.title}</h3>
      <p>{selectedObj.description}</p>
      <pre>
        <code>{selectedObj.code}</code>
      </pre>
    </div>
  );

  function OnClickHandler(selectedButton){
    console.log(selectedButton);
    setSelectedTopic(selectedButton);
    setSelectedObj(EXAMPLES[selectedButton]);
  }

  return (
    <div>
      <Header />
      <main>
        <section id="core-concepts">
          <h2>Core Concepts</h2>
          <ul>
            <CoreConcept
              title={CORE_CONCEPTS[0].title}
              description={CORE_CONCEPTS[0].description}
              image={CORE_CONCEPTS[0].image}
            />
            <CoreConcept {...CORE_CONCEPTS[1]} />
            <CoreConcept {...CORE_CONCEPTS[2]} />
            <CoreConcept {...CORE_CONCEPTS[3]} />
          </ul>
        </section>
        <section id="examples">
          <h2>Examples</h2>
          <menu>
            <TabButton onSelect={() => OnClickHandler('components')}>
              Components
            </TabButton>
            <TabButton onSelect={() => OnClickHandler('jsx')}>JSX</TabButton>
            <TabButton onSelect={() => OnClickHandler('props')}>
              Props
            </TabButton>
            <TabButton onSelect={() => OnClickHandler('state')}>
              State
            </TabButton>
          </menu>
          <div id="tab-content">
            {!selectedTopic && <p>Please select a topic</p> }
            {selectedTopic && tabContent}
          </div>
        </section>
      </main>
    </div>
  );
}

export default App;
